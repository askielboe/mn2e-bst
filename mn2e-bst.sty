% The following three macros provide auxiliary support for the BibTeX
% wranglings in mn2e.bst.  They provide support for functionality
% which it is impossible, or at least unmaintainably arcane, to
% provide within BibTeX Style Language.
%
% These definitions can be loaded as a package or, probably better,
% should be incorporated into a mn2e.cls file.
%
% These depend on the presence of a \href{URL}{text} macro, as
% provided by the hyperref package.  The mn2e.bst style depends
% additionally on the \url{URL} macro, which hyperref also provides.
%
% If the hyperref package is not included, then suitable defaults are
%
%   \def\href#1#2{#2}
%   \def\@url#1{#1\endgroup}
%   \def\url{\begingroup\@urlcharsother \ttfamily \@url}
%
% These must appear _after_ this package is loaded, and should appear
% _instead_ of loading the hyperref package (it'll probably be OK to
% let the hyperref package redefine these, but that is to tempt fate).


% \@urlcharsother
%
% 'Other' some characters which may appear in DOIs and URIs.
%
% All of the characters here may appear in URIs, except for '^' and '\'.
%
% There appear to be almost no restrictions on what characters appear
% in DOIs (or at least none discovereable in ISO 26324:2012, which
% says simply that the 'DOI suffix' is "a character string of any
% length".  A DOI registrant which uses characters outside ASCII plus
% the following set, is a DOI registrant who should be taken outside
% and challenged on their taste.
%
% The following list is not simply \dospecials, because that includes
% '{' and '}', which we need.  And if they're in a DOI... well.
\def\@urlcharsother{%
  \let\do\@makeother 
  \do\\\do\$\do\&\do\#\do\^\do\_\do\%\do\~}

% \doi
%
% \doi{10.foo} formats the DOI in the argument, and provides a link to dx.doi.org.
% \doi[text]{10.foo} formats the DOI 10.foo, but provides 'text' as the link.
% The DOI can contain {\$&#^_%~} (though there's not necessarily a
% guarantee that these will still work as URL characters within the PDF)
\def\doi{\begingroup
  \@urlcharsother
  \@ifnextchar[%
    {\@doi}
    {\@doi[]}}
\def\@doi[#1]#2{%
  \def\@tempa{#1}%
  \ifx\@tempa\@empty
    \href{http://dx.doi.org/#2}{doi:#2}%
  \else
    \href{http://dx.doi.org/#2}{#1}%
  \fi
  \endgroup
  }

% \eprint
%
% \eprint{defaultArchivePrefix}{id} expands to a link to the given ID
% at a suitable archive.  The 'id' can be either a bare ID (such as
% yymm.1234) for arXiv, or can include an archive prefix.  If there is
% no prefix in the 'id', then 'defaultArchivePrefix' supplies a default.
%
% Thus
%   \eprint{}{arXiv:yymm.1234} -> \href{http://arxiv.org/abs/yymm.1234}{arXiv:yymm.1234}
%   \eprint{}{yymm.1234} -> same as \eprint{}{arXiv:yymm.1234}
%   \eprint{arXiv}{arXiv:yymm.1234} -> same
%   \eprint{dblp}{1234} -> \href{http://dblp.uni-trier.de/rec/bibtex/1234.xml}{dblp:1234}
%   \eprint{dblp}{arXiv:yymm.1234} -> same as \eprint{}{arXiv:yymm.1234}
%   \eprint{}{wibble:1234} -> wibble:1234 (doesn't match anything)
%
% A prefix 'PFX' is 'registered' by defining a macro
% \@eprint@PFX#1{...} which formats the identifier (that is, \eprint's
% second argument _minus_ any colon-terminated prefix).
\def\eprint#1#2{%
  \@eprint#1:#2::\@nil}
\def\@eprint@arXiv#1{\href{http://arxiv.org/abs/#1}{{\tt arXiv:#1}}}
\def\@eprint@dblp#1{\href{http://dblp.uni-trier.de/rec/bibtex/#1.xml}{dblp:#1}}
\def\@eprint#1:#2:#3:#4\@nil{%
  \def\@tempa{#1}%
  \def\@tempb{#2}%
  \def\@tempc{#3}%
  \ifx\@tempc\@empty
    \let\@tempc\@tempb
    \let\@tempb\@tempa
  \fi
  \ifx\@tempb\@empty
    % default to arXiv
    \def\@tempb{arXiv}%
  \fi
  % If \@tempb is a 'recognised' prefix, then call it, otherwise, just
  % print prefix:id and be done with it.  A prefix is 'recognised' if
  % there's a macro \@eprint@<prefix>.
  \@ifundefined{@eprint@\@tempb}
    {\@tempb:\@tempc}
    % or call macro '@eprint@\@tempb' on the argument \@tempc
    {\expandafter\expandafter\csname @eprint@\@tempb\endcsname\expandafter{\@tempc}}%
  }

% \mniiiauthor
%
% The following implements the three-author-hack described in mn2e.bst.
%
% This consumes a command for each such author.  It's surely possible
% to avoid this (with some constructions involving {\\#1}; see
% Appendix D cleverness), but that would verge on the unmaintanably
% arcane, and not be really worth it.
\def\mniiiauthor#1#2#3{%
  \@ifundefined{mniiiauth@#1}
    {\global\expandafter\let\csname mniiiauth@#1\endcsname\null #2}
    {#3}}

\endinput
